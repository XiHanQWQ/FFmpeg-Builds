name: 构建 FFmpeg

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      doRelease:
        description: '发布新版本'
        type: boolean
        default: false
        required: false
      buildOnly:
        description: '只构建ffmpeg'
        type: boolean
        default: false
        required: false
  schedule:
    - cron: '0 12 * * *'

env:
  DOCKER_BUILDKIT: 1

jobs:
  pre_check:
    name: 预检查
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: 仓库检查
        run: |
          if [[ "$GITHUB_REPOSITORY" != "XiHanQWQ/FFmpeg-Builds" ]]; then
            echo "当您fork此仓库进行自己的构建时，必须调整此检查。"
            echo "在这样做时，请确保随机化上面的计划cron时间，以尽可能分散各种构建时间。"
            echo "由于成百上千的并行构建可能对外部基础设施造成巨大流量，因此采取了这一措施。"
            exit 1
          fi
          exit 0
  build_base:
    name: 构建基础镜像
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    needs: pre_check
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest,ubuntu-24.04-arm]
    runs-on: ${{ matrix.runner }}
    steps:
      - name: 释放磁盘空间
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 安装 buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: 登录 Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 镜像名称
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/base"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
      - name: 停止命令
        run: T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: 构建目标基础镜像
        uses: docker/build-push-action@v6
        with:
          context: images/base
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
      - name: 获取下载缓存键
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
      - name: 缓存
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        uses: actions/cache@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          restore-keys: |
            download-cache-
      - name: 更新缓存
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        run: |
          set -e
          ./download.sh
          ./util/clean_cache.sh
      - name: 清理
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true
  build_target_bases:
    name: 构建目标基础镜像
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    needs: build_base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,winarm64,linux64,linuxarm64]
    steps:
      - name: 释放磁盘空间
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 安装 buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: 登录 Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 镜像名称
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/base-${{ matrix.target }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "gh_repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
      - name: 停止命令
        run: T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: 构建目标基础镜像
        uses: docker/build-push-action@v6
        with:
          context: images/base-${{ matrix.target }}
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
          build-args: |
            GH_REPO=ghcr.io/${{ steps.imagename.outputs.gh_repo }}
      - name: 清理
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true
  build_targets:
    name: 构建目标-变体镜像
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    needs: build_target_bases
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,winarm64,linux64,linuxarm64]
        variant: [gpl,lgpl,gpl 6.1,gpl 7.1,lgpl 6.1,lgpl 7.1,gpl-shared,lgpl-shared,gpl-shared 6.1,gpl-shared 7.1,lgpl-shared 6.1,lgpl-shared 7.1]
    steps:
      - name: 释放磁盘空间
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 安装 buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: 登录 Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 镜像名称
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/${{ matrix.target }}-${{ matrix.variant }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
      - name: 获取下载缓存键
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
      - name: 停止命令
        run: T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: 生成 Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: 缓存
        uses: actions/cache/restore@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          fail-on-cache-miss: true
      - name: 构建目标基础镜像
        uses: docker/build-push-action@v6
        with:
          context: .
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
      - name: 清理
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true
  build_ffmpeg:
    name: 构建 FFmpeg
    if: ${{ ( github.event.inputs.buildOnly == 'true' && !cancelled() ) || success() }}
    needs: build_targets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,winarm64,linux64,linuxarm64]
        variant: [gpl,lgpl,gpl 6.1,gpl 7.1,lgpl 6.1,lgpl 7.1,gpl-shared,lgpl-shared,gpl-shared 6.1,gpl-shared 7.1,lgpl-shared 6.1,lgpl-shared 7.1]
    steps:
      - name: 释放磁盘空间
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 登录 Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 构建 FFmpeg
        run: |
          T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
          ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: 替换字符串中的空格
        id: strs
        run: |
          SLUG="${{ matrix.target }}-${{ matrix.variant }}"
          echo "artifact_slug=${SLUG// /-}" >> $GITHUB_OUTPUT
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ steps.strs.outputs.artifact_slug }}
          overwrite: true
          path: artifacts/*
  publish_release:
    name: 发布
    if: ${{ !cancelled() && ( github.event_name == 'schedule' || github.event.inputs.doRelease == 'true' ) && needs.build_ffmpeg.result == 'success' }}
    needs: build_ffmpeg
    runs-on: ubuntu-latest
    steps:
      - name: 释放磁盘空间
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-*
          merge-multiple: true
          path: artifacts
      - name: 创建发布
        id: create_release
        run: |
          set -xe
          shopt -s nullglob
          RELDATE="$(date +'%Y-%m-%d %H:%M')"
          NAME="自动构建 $RELDATE"
          TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
          (cd artifacts && sha256sum *.{7z,zip,tar.xz} > checksums.sha256)
          gh release create "$TAGNAME" --target "master" --title "$NAME" artifacts/*.{7z,zip,tar.xz} artifacts/checksums.*
          echo "tag_name=${TAGNAME}" >> $GITHUB_OUTPUT
          echo "rel_date=${RELDATE}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 更新最新版本
        run: |
          set -xe
          shopt -s nullglob
          mkdir latest_artifacts
          ./util/repack_latest.sh latest_artifacts artifacts/*.{7z,zip,tar.xz}
          (cd latest_artifacts && sha256sum *.{7z,zip,tar.xz} > checksums.sha256)
          NAME="最新自动构建 (${{ steps.create_release.outputs.rel_date }})"
          TAGNAME="latest"
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          sleep 15
          gh release create "$TAGNAME" --target "master" --title "$NAME" latest_artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 更新 Wiki
        run: ./util/update_wiki.sh artifacts ${{ steps.create_release.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      - name: 清理旧版本
        run: ./util/prunetags.sh
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

# name: 构建 FFmpeg

# on:
#   push:
#     paths-ignore:
#       - '**.md'
#       - 'LICENSE'
#   workflow_dispatch:
#     inputs:
#       doRelease:
#         description: '发布新版本'
#         type: boolean
#         default: false
#         required: false
#       buildOnly:
#         description: '只构建ffmpeg'
#         type: boolean
#         default: false
#         required: false
#   schedule:
#     - cron: '0 12 * * *'

# env:
#   DOCKER_BUILDKIT: 1

# jobs:
#   pre_check:
#     name: 预检查
#     if: ${{ github.event.inputs.buildOnly != 'true' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: 仓库检查
#         run: |
#           if [[ "$GITHUB_REPOSITORY" != "XiHanQWQ/FFmpeg-Builds" ]]; then
#             echo "当您fork此仓库进行自己的构建时，必须调整此检查。"
#             echo "在这样做时，请确保随机化上面的计划cron时间，以尽可能分散各种构建时间。"
#             echo "由于成百上千的并行构建可能对外部基础设施造成巨大流量，因此采取了这一措施。"
#             exit 1
#           fi
#           exit 0
#   build_base:
#     name: 构建基础镜像
#     if: ${{ github.event.inputs.buildOnly != 'true' }}
#     needs: pre_check
#     strategy:
#       fail-fast: false
#       matrix:
#         runner: [ubuntu-latest,ubuntu-24.04-arm]
#     runs-on: ${{ matrix.runner }}
#     steps:
#       - name: 释放磁盘空间
#         run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
#       - name: 检出代码
#         uses: actions/checkout@v4
#       - name: 安装 buildx
#         uses: docker/setup-buildx-action@v3
#         with:
#           buildkitd-config: .github/buildkit.toml
#       - name: 登录 Docker
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 镜像名称
#         id: imagename
#         run: |
#           IMG="${GITHUB_REPOSITORY,,}/base"
#           echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
#           echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
#       - name: 停止命令
#         run: T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
#       - name: 构建目标基础镜像
#         uses: docker/build-push-action@v6
#         with:
#           context: images/base
#           pull: true
#           push: true
#           provenance: false
#           tags: ${{ steps.imagename.outputs.name }}:latest${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
#           cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
#           cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
#       - name: 获取下载缓存键
#         if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
#         id: dl_cache
#         run: |
#           echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
#       - name: 缓存
#         if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
#         uses: actions/cache@v4
#         with:
#           path: .cache/downloads
#           key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
#           restore-keys: |
#             download-cache-
#       - name: 更新缓存
#         if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
#         run: |
#           set -e
#           ./download.sh
#           ./util/clean_cache.sh
#       - name: 清理
#         continue-on-error: true
#         uses: BtbN/delete-untagged-ghcr-action@main
#         with:
#           token: ${{ secrets.WORKFLOW_TOKEN }}
#           package_name: ${{ steps.imagename.outputs.rawname }}
#           repository_owner: ${{ github.repository_owner }}
#           repository: ${{ github.repository }}
#           owner_type: user
#           untagged_only: true
#   build_target_bases:
#     name: 构建目标基础镜像
#     if: ${{ github.event.inputs.buildOnly != 'true' }}
#     needs: build_base
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         target: [win64,winarm64,linux64,linuxarm64]
#     steps:
#       - name: 释放磁盘空间
#         run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
#       - name: 检出代码
#         uses: actions/checkout@v4
#       - name: 安装 buildx
#         uses: docker/setup-buildx-action@v3
#         with:
#           buildkitd-config: .github/buildkit.toml
#       - name: 登录 Docker
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 镜像名称
#         id: imagename
#         run: |
#           IMG="${GITHUB_REPOSITORY,,}/base-${{ matrix.target }}"
#           echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
#           echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
#           echo "gh_repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
#       - name: 停止命令
#         run: T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
#       - name: 构建目标基础镜像
#         uses: docker/build-push-action@v6
#         with:
#           context: images/base-${{ matrix.target }}
#           pull: true
#           push: true
#           provenance: false
#           tags: ${{ steps.imagename.outputs.name }}:latest
#           cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
#           cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
#           build-args: |
#             GH_REPO=ghcr.io/${{ steps.imagename.outputs.gh_repo }}
#       - name: 清理
#         continue-on-error: true
#         uses: BtbN/delete-untagged-ghcr-action@main
#         with:
#           token: ${{ secrets.WORKFLOW_TOKEN }}
#           package_name: ${{ steps.imagename.outputs.rawname }}
#           repository_owner: ${{ github.repository_owner }}
#           repository: ${{ github.repository }}
#           owner_type: user
#           untagged_only: true
#   build_targets:
#     name: 构建目标-变体镜像
#     if: ${{ github.event.inputs.buildOnly != 'true' }}
#     needs: build_target_bases
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         target: [win64,winarm64,linux64,linuxarm64]
#         variant: [gpl,lgpl,gpl 6.1,gpl 7.1,lgpl 6.1,lgpl 7.1,gpl-shared,lgpl-shared,gpl-shared 6.1,gpl-shared 7.1,lgpl-shared 6.1,lgpl-shared 7.1]
#     steps:
#       - name: 释放磁盘空间
#         run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
#       - name: 检出代码
#         uses: actions/checkout@v4
#       - name: 安装 buildx
#         uses: docker/setup-buildx-action@v3
#         with:
#           buildkitd-config: .github/buildkit.toml
#       - name: 登录 Docker
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 镜像名称
#         id: imagename
#         run: |
#           IMG="${GITHUB_REPOSITORY,,}/${{ matrix.target }}-${{ matrix.variant }}"
#           echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
#           echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
#       - name: 获取下载缓存键
#         id: dl_cache
#         run: |
#           echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
#       - name: 停止命令
#         run: T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
#       - name: 生成 Dockerfile
#         run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
#       - name: 缓存
#         uses: actions/cache/restore@v4
#         with:
#           path: .cache/downloads
#           key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
#           fail-on-cache-miss: true
#       - name: 构建目标基础镜像
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           pull: true
#           push: true
#           provenance: false
#           tags: ${{ steps.imagename.outputs.name }}:latest
#           cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
#           cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
#       - name: 清理
#         continue-on-error: true
#         uses: BtbN/delete-untagged-ghcr-action@main
#         with:
#           token: ${{ secrets.WORKFLOW_TOKEN }}
#           package_name: ${{ steps.imagename.outputs.rawname }}
#           repository_owner: ${{ github.repository_owner }}
#           repository: ${{ github.repository }}
#           owner_type: user
#           untagged_only: true
#   build_ffmpeg:
#     name: 构建 FFmpeg
#     if: ${{ ( github.event.inputs.buildOnly == 'true' && !cancelled() ) || success() }}
#     needs: build_targets
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         target: [win64,winarm64,linux64,linuxarm64]
#         variant: [gpl,lgpl,gpl 6.1,gpl 7.1,lgpl 6.1,lgpl 7.1,gpl-shared,lgpl-shared,gpl-shared 6.1,gpl-shared 7.1,lgpl-shared 6.1,lgpl-shared 7.1]
#     steps:
#       - name: 释放磁盘空间
#         run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
#       - name: 检出代码
#         uses: actions/checkout@v4
#       - name: 登录 Docker
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 构建 FFmpeg
#         run: |
#           T="$(echo -n ${{ secrets.WORKFLOW_TOKEN }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
#           ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
#       - name: 替换字符串中的空格
#         id: strs
#         run: |
#           SLUG="${{ matrix.target }}-${{ matrix.variant }}"
#           echo "artifact_slug=${SLUG// /-}" >> $GITHUB_OUTPUT
#       - name: 上传构建产物
#         uses: actions/upload-artifact@v4
#         with:
#           name: ffmpeg-${{ steps.strs.outputs.artifact_slug }}
#           overwrite: true
#           path: artifacts/*
#   publish_release:
#     name: 发布
#     if: ${{ !cancelled() && ( github.event_name == 'schedule' || github.event.inputs.doRelease == 'true' ) && needs.build_ffmpeg.result == 'success' }}
#     needs: build_ffmpeg
#     runs-on: ubuntu-latest
#     steps:
#       - name: 释放磁盘空间
#         run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
#       - name: 检出代码
#         uses: actions/checkout@v4
#       - name: 下载构建产物
#         uses: actions/download-artifact@v4
#         with:
#           pattern: ffmpeg-*
#           merge-multiple: true
#           path: artifacts
#       - name: 创建发布
#         id: create_release
#         run: |
#           set -xe
#           shopt -s nullglob
#           RELDATE="$(date +'%Y-%m-%d %H:%M')"
#           NAME="自动构建 $RELDATE"
#           TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
#           (cd artifacts && sha256sum *.{zip,tar.xz} > checksums.sha256)
#           gh release create "$TAGNAME" --target "master" --title "$NAME" artifacts/*.{zip,tar.xz} artifacts/checksums.*
#           echo "tag_name=${TAGNAME}" >> $GITHUB_OUTPUT
#           echo "rel_date=${RELDATE}" >> $GITHUB_OUTPUT
#         env:
#           GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 更新最新版本
#         run: |
#           set -xe
#           shopt -s nullglob
#           mkdir latest_artifacts
#           ./util/repack_latest.sh latest_artifacts artifacts/*.{zip,tar.xz}
#           (cd latest_artifacts && sha256sum *.{zip,tar.xz} > checksums.sha256)
#           NAME="最新自动构建 (${{ steps.create_release.outputs.rel_date }})"
#           TAGNAME="latest"
#           gh release delete --cleanup-tag --yes "$TAGNAME" || true
#           sleep 15
#           gh release create "$TAGNAME" --target "master" --title "$NAME" latest_artifacts/*
#         env:
#           GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 更新 Wiki
#         run: ./util/update_wiki.sh artifacts ${{ steps.create_release.outputs.tag_name }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
#       - name: 清理旧版本
#         run: ./util/prunetags.sh
#         env:
#           GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
